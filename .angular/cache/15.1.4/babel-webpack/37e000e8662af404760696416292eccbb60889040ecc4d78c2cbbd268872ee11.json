{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { AuthService } from './auth.service';\nimport { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(inj) {\n      this.inj = inj;\n    }\n    intercept(req, next) {\n      const authService = this.inj.get(AuthService);\n      // Get the auth header from the service.\n      const authToken = authService.getToken();\n      // Clone the request to add the new header.\n      const authReq = req.clone({\n        headers: req.headers.set('Authorization', 'bearer ' + authToken)\n      });\n      // Pass on the cloned request instead of the original request.\n      return next.handle(authReq);\n    }\n  }\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i0.Injector));\n  };\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();\nexport let UnauthorizedInterceptor = /*#__PURE__*/(() => {\n  class UnauthorizedInterceptor {\n    constructor(inj) {\n      this.inj = inj;\n    }\n    intercept(req, next) {\n      const authService = this.inj.get(AuthService);\n      const authToken = authService.getToken();\n      return next.handle(req).pipe(tap(event => {\n        // do nothing\n      }, err => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401 && authToken) {\n            console.log('Unauthorized Interceptor: ', err);\n            authService.checkJWTtoken();\n          }\n        }\n      }));\n    }\n  }\n  UnauthorizedInterceptor.ɵfac = function UnauthorizedInterceptor_Factory(t) {\n    return new (t || UnauthorizedInterceptor)(i0.ɵɵinject(i0.Injector));\n  };\n  UnauthorizedInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UnauthorizedInterceptor,\n    factory: UnauthorizedInterceptor.ɵfac\n  });\n  return UnauthorizedInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}