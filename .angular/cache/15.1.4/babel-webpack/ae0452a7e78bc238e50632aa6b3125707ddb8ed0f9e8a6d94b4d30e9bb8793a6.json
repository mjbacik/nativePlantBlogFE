{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { baseURL } from '../shared/baseurl';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./process-httpmsg.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, processHTTPMsgService) {\n      this.http = http;\n      this.processHTTPMsgService = processHTTPMsgService;\n      this.tokenKey = 'JWT';\n      this.isAuthenticated = false;\n      this.user = new Subject();\n      this.firstname = new Subject();\n      this.authToken = undefined;\n    }\n    checkJWTtoken() {\n      this.http.get(baseURL + '/users/checkJWTtoken').subscribe(res => {\n        this.sendUsername(res.user);\n      }, err => {\n        this.destroyUserCredentials();\n      });\n    }\n    sendUsername(name) {\n      this.user.next(name);\n      this.userDetail = name;\n    }\n    clearUsername() {\n      this.user.next(undefined);\n      this.firstname.next(undefined);\n    }\n    loadUserCredentials() {\n      const credentials = JSON.parse(localStorage.getItem(this.tokenKey));\n      if (credentials && credentials.email !== undefined) {\n        this.useCredentials(credentials);\n        if (this.authToken) {\n          this.checkJWTtoken();\n        }\n      }\n    }\n    storeUserCredentials(credentials) {\n      localStorage.setItem(this.tokenKey, JSON.stringify(credentials));\n      this.useCredentials(credentials);\n    }\n    useCredentials(credentials) {\n      this.isAuthenticated = true;\n      this.authToken = credentials.token;\n    }\n    destroyUserCredentials() {\n      this.authToken = undefined;\n      this.clearUsername();\n      this.isAuthenticated = false;\n      localStorage.removeItem(this.tokenKey);\n    }\n    signUp(name, email, password) {\n      return this.http.post(baseURL + '/users/signup', {\n        'name': name,\n        'email': email,\n        'password': password\n      }).pipe(map(res => {\n        this.storeUserCredentials({\n          firstname: name,\n          email: email,\n          token: res.token\n        });\n        return {\n          'success': true,\n          'email': email\n        };\n      }), catchError(error => this.processHTTPMsgService.handleError(error)));\n    }\n    getSavedEmail() {\n      return [this.saveemail, this.text];\n    }\n    logIn(email, password) {\n      return this.http.post(baseURL + '/users/login', {\n        'email': email,\n        'password': password\n      }).pipe(map(res => {\n        this.storeUserCredentials({\n          email: email,\n          token: res.token\n        });\n        return {\n          'success': true,\n          'email': email\n        };\n      }), catchError(error => this.processHTTPMsgService.handleError(error)));\n    }\n    logOut() {\n      this.destroyUserCredentials();\n    }\n    isLoggedIn() {\n      return this.isAuthenticated;\n    }\n    getUsername() {\n      return this.user;\n    }\n    getToken() {\n      return this.authToken;\n    }\n  }\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ProcessHttpmsgService));\n  };\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}